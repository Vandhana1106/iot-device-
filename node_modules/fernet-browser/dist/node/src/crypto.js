"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function encrypt(_a, passphrase, plainText) {
    var crypto = _a.crypto, stringToBuffer = _a.stringToBuffer, bufferToBase64 = _a.bufferToBase64;
    return __awaiter(this, void 0, void 0, function () {
        var saltBuffer, iterations, cryptoKey, derivedKey, cipherTextBuffer;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    saltBuffer = crypto.getRandomValues(new Uint8Array(16));
                    iterations = 1000;
                    return [4 /*yield*/, crypto.subtle.importKey("raw", stringToBuffer(passphrase), "PBKDF2", false, ["deriveKey"])];
                case 1:
                    cryptoKey = _b.sent();
                    return [4 /*yield*/, crypto.subtle.deriveKey({
                            name: "PBKDF2",
                            salt: saltBuffer,
                            iterations: iterations,
                            hash: "SHA-256"
                        }, cryptoKey, {
                            name: "AES-GCM",
                            length: 256
                        }, false, ["encrypt", "decrypt"])];
                case 2:
                    derivedKey = _b.sent();
                    return [4 /*yield*/, crypto.subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(8)
                        }, derivedKey, stringToBuffer(plainText))];
                case 3:
                    cipherTextBuffer = _b.sent();
                    return [2 /*return*/, "PBKDF2:HMAC-SHA256:" + bufferToBase64(saltBuffer) + ":" + iterations.toString() + ":" + bufferToBase64(cipherTextBuffer)];
            }
        });
    });
}
exports.encrypt = encrypt;
function decrypt(_a, passphrase, encrpytedString) {
    var crypto = _a.crypto, stringToBuffer = _a.stringToBuffer, base64ToBuffer = _a.base64ToBuffer, bufferToBase64 = _a.bufferToBase64;
    return __awaiter(this, void 0, void 0, function () {
        var matches, _b, _, kdf, algorithm, salt, iterations, cipherText, cryptoKey, derivedKey, plainText;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    matches = /([^:]*):([^:]*):([^:]*):([^:]*):([^:]*)/.exec(encrpytedString);
                    if (!matches) {
                        throw new Error("Illegal input");
                    }
                    _b = __read(matches, 6), _ = _b[0], kdf = _b[1], algorithm = _b[2], salt = _b[3], iterations = _b[4], cipherText = _b[5];
                    return [4 /*yield*/, crypto.subtle.importKey("raw", stringToBuffer(passphrase), "PBKDF2", false, ["deriveKey"])];
                case 1:
                    cryptoKey = _c.sent();
                    return [4 /*yield*/, crypto.subtle.deriveKey({
                            name: "PBKDF2",
                            salt: base64ToBuffer(salt),
                            iterations: parseInt(iterations),
                            hash: "SHA-256"
                        }, cryptoKey, {
                            name: "AES-GCM",
                            length: 256
                        }, false, ["encrypt", "decrypt"])];
                case 2:
                    derivedKey = _c.sent();
                    return [4 /*yield*/, crypto.subtle.decrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(8)
                        }, derivedKey, base64ToBuffer(cipherText))];
                case 3:
                    plainText = _c.sent();
                    return [2 /*return*/, String.fromCharCode.apply(String, __spread(new Uint8Array(plainText)))];
            }
        });
    });
}
exports.decrypt = decrypt;
