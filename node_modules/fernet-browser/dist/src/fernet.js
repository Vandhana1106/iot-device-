"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var version = new Uint8Array([128]); // This field denotes which version of the format is being used by the token. Currently there is only one version defined, with the value 128 (0x80).
/**
 * Given a key and message, generate a fernet token.
 *
 * @param crypto The web-crypto api.  Either window.crypto or require("node-webcrypto-ossl").
 * @param secret A base64 encoded fernet key (https://github.com/fernet/spec/blob/master/Spec.md#key-format)
 * @param now The current timestamp encoded as an ISO8601 time string
 * @param iv The IV to use, represented as a 16 byte Uint8Array
 * @param src The string to encode
 */
function generate(crypto, secret, now, iv, src) {
    return __awaiter(this, void 0, void 0, function () {
        var key, plaintext, cryptoKey, cipherText, _a, timestamp, hmac, token;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (iv.byteLength !== 16) {
                        throw new Error("The IV must be 16 bytes long");
                    }
                    key = new Key(secret);
                    plaintext = Buffer.from(src, "utf8");
                    return [4 /*yield*/, makeCryptoKey(crypto, key)];
                case 1:
                    cryptoKey = _b.sent();
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, crypto.subtle.encrypt({
                            name: "AES-CBC",
                            iv: iv
                        }, cryptoKey, plaintext)];
                case 2:
                    cipherText = new (_a.apply(Uint8Array, [void 0, _b.sent()]))();
                    timestamp = packInt(new Date(now).getTime() / 1000);
                    return [4 /*yield*/, makeHMAC(crypto, key, timestamp, iv, cipherText)];
                case 3:
                    hmac = _b.sent();
                    token = concatArrayBuffers(version, timestamp, iv, cipherText, hmac);
                    // base64url encode the entire token and return it
                    return [2 /*return*/, base64UrlEncode(token)];
            }
        });
    });
}
exports.generate = generate;
/**
 * Given a key and token, verify that the token is valid and recover the original message.
 *
 * @param crypto The web-crypto api.  Either window.crypto or require("node-webcrypto-ossl").
 * @param secret A base64 encoded fernet key (https://github.com/fernet/spec/blob/master/Spec.md#key-format)
 * @param encodedToken A fernet token
 * @param ttl The time-to-live; if set, the token must be less than ttl seconds old otherwise it won't be decoded
 */
function verify(crypto, secret, encodedToken, ttl) {
    return __awaiter(this, void 0, void 0, function () {
        var key, token, timestamp, iv, cipherText, hmac, recomputedHmac, n, cryptoKey, plaintext;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = new Key(secret);
                    token = base64urlDecode(encodedToken);
                    // Ensure the first byte of the token is 0x80.
                    if (token[0] !== 0x80) {
                        throw new Error("Illegal Fernet version");
                    }
                    timestamp = token.subarray(1, 9);
                    iv = token.subarray(9, 25);
                    cipherText = token.subarray(25, token.byteLength - 32);
                    hmac = token.subarray(token.byteLength - 32);
                    // If the user has specified a maximum age (or "time-to-live") for the token, ensure the recorded timestamp is not too far in the past.
                    if (ttl !== undefined) {
                        if (unpackInt(timestamp) + ttl <= new Date().getTime() / 1000) {
                            throw new Error("This token has expired");
                        }
                    }
                    return [4 /*yield*/, makeHMAC(crypto, key, timestamp, iv, cipherText)];
                case 1:
                    recomputedHmac = _a.sent();
                    // Ensure the recomputed HMAC matches the HMAC field stored in the token, using a constant-time comparison function.
                    for (n = 0; n < Math.min(recomputedHmac.byteLength, hmac.byteLength); n++) {
                        if (recomputedHmac[n] !== hmac[n]) {
                            throw new Error("HMACs do not match");
                        }
                    }
                    return [4 /*yield*/, makeCryptoKey(crypto, key)];
                case 2:
                    cryptoKey = _a.sent();
                    return [4 /*yield*/, crypto.subtle.decrypt({
                            name: "AES-CBC",
                            iv: iv
                        }, cryptoKey, cipherText)];
                case 3:
                    plaintext = _a.sent();
                    return [2 /*return*/, Buffer.from(plaintext).toString()];
            }
        });
    });
}
exports.verify = verify;
function makeCryptoKey(crypto, key) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, crypto.subtle.importKey("raw", key.encryptionKey, "AES-CBC", false, ["encrypt", "decrypt"])];
        });
    });
}
/**
 * Compute the 256-bit SHA256 HMAC, under signing-key, of the concatenation of the following fields:
 *
 * Version ‖ Timestamp ‖ IV ‖ Ciphertext
 *
 * Note that the HMAC input is the entire rest of the token verbatim, and that this input is not base64url encoded.
 *
 * @param signingKey
 * @param timestamp
 * @param iv
 * @param cipherText
 */
function makeHMAC(crypto, key, timestamp, iv, cipherText) {
    return __awaiter(this, void 0, void 0, function () {
        var hmacInput, cryptoKey, hmac;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hmacInput = concatArrayBuffers(version, timestamp, iv, cipherText);
                    return [4 /*yield*/, crypto.subtle.importKey("raw", key.signingKey, {
                            name: "HMAC",
                            hash: {
                                name: "SHA-256"
                            }
                        }, false, ["sign", "verify"] //can be any combination of "sign" and "verify"
                        )];
                case 1:
                    cryptoKey = _a.sent();
                    return [4 /*yield*/, crypto.subtle.sign("HMAC", cryptoKey, hmacInput)];
                case 2:
                    hmac = _a.sent();
                    return [2 /*return*/, new Uint8Array(hmac)];
            }
        });
    });
}
/**
 * Pack an integer as a 64 bit unsigned int (big-endian)
 *
 * @param timestamp
 */
function packInt(value) {
    var arrayBuffer = new Uint8Array(8);
    new DataView(arrayBuffer.buffer).setUint32(4, value);
    return arrayBuffer;
}
function unpackInt(arrayBuffer) {
    // Some silliness to get around the underlying buffer being shared
    var tmpBuffer = new Uint8Array(arrayBuffer.length);
    tmpBuffer.set(arrayBuffer);
    return new DataView(tmpBuffer.buffer).getUint32(4);
}
function base64UrlEncode(arrayBuffer) {
    return Buffer.from(arrayBuffer).toString("base64").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64urlDecode(data) {
    return Buffer.from(data.replace(/-/g, "+").replace(/_/g, "/"), "base64");
}
/**
 * Concatenate multiple ArrayBuffers together
 *
 * @param arrayBuffers
 */
function concatArrayBuffers() {
    var arrayBuffers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrayBuffers[_i] = arguments[_i];
    }
    var totalByteLength = arrayBuffers.reduce(function (byteLength, arrayBuffer) { return byteLength + arrayBuffer.byteLength; }, 0);
    var result = new Uint8Array(totalByteLength);
    arrayBuffers.reduce(function (currentBytePosition, arrayBuffer) {
        result.set(arrayBuffer, currentBytePosition);
        return currentBytePosition + arrayBuffer.byteLength;
    }, 0);
    return result;
}
var Key = /** @class */ (function () {
    function Key(secret) {
        var decodedKey = base64urlDecode(secret);
        // Get the signing and encryption key from the secret
        if (decodedKey.byteLength !== 32) {
            throw new Error("Incorrect key");
        }
        this.signingKey = decodedKey.slice(0, 16);
        this.encryptionKey = decodedKey.slice(16, 32);
    }
    return Key;
}());
