export declare function encrypt(crypto: Crypto, passphrase: string, plainText: string): Promise<string>;
export declare function decrypt(crypto: Crypto, passphrase: string, cipherText: string): Promise<string>;
/**
 * Derive a secret key from the given passphrase using PBKDF2 with the given number of iterations.  This returns the
 * salt, the number of iterations to use and the secret generated (all three of these bits of information are required
 * to rebuild the secret from the passphrase).
 *
 * @param crypto The web-crypto api.  Either window.crypto or require("node-webcrypto-ossl").
 * @param passphrase The passphrase to use for encryption
 * @param iterations The number of iterations to use, or this defaults to 10000.
 */
export declare function makeFernetKeyFromPassphrase(crypto: Crypto, passphrase: string, config?: Config): Promise<{
    config: Config;
    fernetKey: string;
}>;
interface Config {
    iterations: number;
    salt?: string;
}
export {};
