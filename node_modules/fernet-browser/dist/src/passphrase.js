"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fernet_1 = require("./fernet");
function encrypt(crypto, passphrase, plainText) {
    return __awaiter(this, void 0, void 0, function () {
        var key, token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeFernetKeyFromPassphrase(crypto, passphrase)];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, fernet_1.generate(crypto, key.fernetKey, new Date().toISOString(), crypto.getRandomValues(new Uint8Array(16)), plainText)];
                case 2:
                    token = _a.sent();
                    return [2 /*return*/, JSON.stringify({
                            config: key.config,
                            token: token
                        })];
            }
        });
    });
}
exports.encrypt = encrypt;
function decrypt(crypto, passphrase, cipherText) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, config, token, key;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = JSON.parse(cipherText), config = _a.config, token = _a.token;
                    return [4 /*yield*/, makeFernetKeyFromPassphrase(crypto, passphrase, config)];
                case 1:
                    key = _b.sent();
                    return [2 /*return*/, fernet_1.verify(crypto, key.fernetKey, token)];
            }
        });
    });
}
exports.decrypt = decrypt;
/**
 * Derive a secret key from the given passphrase using PBKDF2 with the given number of iterations.  This returns the
 * salt, the number of iterations to use and the secret generated (all three of these bits of information are required
 * to rebuild the secret from the passphrase).
 *
 * @param crypto The web-crypto api.  Either window.crypto or require("node-webcrypto-ossl").
 * @param passphrase The passphrase to use for encryption
 * @param iterations The number of iterations to use, or this defaults to 10000.
 */
function makeFernetKeyFromPassphrase(crypto, passphrase, config) {
    if (config === void 0) { config = { iterations: 10000 }; }
    return __awaiter(this, void 0, void 0, function () {
        var saltBuffer, cryptoKey, derivedKey, exportedKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    saltBuffer = config.salt ? Buffer.from(config.salt, "base64") : crypto.getRandomValues(new Uint8Array(16));
                    if (saltBuffer.byteLength !== 16) {
                        throw new Error("Illegal salt length");
                    }
                    return [4 /*yield*/, crypto.subtle.importKey("raw", Buffer.from(passphrase, "utf-8"), "PBKDF2", false, ["deriveKey"])];
                case 1:
                    cryptoKey = _a.sent();
                    return [4 /*yield*/, crypto.subtle.deriveKey({
                            name: "PBKDF2",
                            salt: saltBuffer,
                            iterations: config.iterations,
                            hash: "SHA-256"
                        }, cryptoKey, {
                            name: "AES-CBC",
                            length: 256
                        }, true, ["encrypt", "decrypt"])];
                case 2:
                    derivedKey = _a.sent();
                    return [4 /*yield*/, crypto.subtle.exportKey("raw", derivedKey)];
                case 3:
                    exportedKey = _a.sent();
                    return [2 /*return*/, {
                            config: {
                                iterations: config.iterations,
                                salt: Buffer.from(saltBuffer).toString("base64")
                            },
                            fernetKey: Buffer.from(exportedKey).toString("base64")
                        }];
            }
        });
    });
}
exports.makeFernetKeyFromPassphrase = makeFernetKeyFromPassphrase;
