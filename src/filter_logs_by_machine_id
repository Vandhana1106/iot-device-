@api_view(['GET'])
def filter_logs_by_machine_id(request):
    machine_id = request.GET.get('machine_id')
    from_date = request.GET.get('from_date')
    to_date = request.GET.get('to_date')
    
    queryset = MachineLog.objects.all()
    
    if machine_id and machine_id.lower() != 'all':
        queryset = queryset.filter(MACHINE_ID=machine_id)
    
    if from_date:
        queryset = queryset.filter(DATE__gte=from_date)
    
    if to_date:
        queryset = queryset.filter(DATE__lte=to_date)
    
    # Prefetch operator data to optimize queries
    logs = list(queryset)
    operator_ids = set(log.OPERATOR_ID for log in logs if log.OPERATOR_ID != "0")
    operators = Operator.objects.filter(rfid_card_no__in=operator_ids)
    operator_map = {op.rfid_card_no: op.operator_name for op in operators}
    
    data = []
    for log in logs:
        # Calculate if this entry should be included in calculations
        calculation_value = 1  # Default to include
        
        # Rule 1: Exclude records where OPERATOR_ID is 0 AND MODE is 2
        if log.OPERATOR_ID == "0" and log.MODE == 2:
            calculation_value = 0
        
        # Rule 2 & 3: Check time constraints (working hours and breaks)
        try:
            # Convert time strings to time objects
            start_time = datetime.strptime(log.START_TIME, '%H:%M:%S').time() if log.START_TIME else None
            end_time = datetime.strptime(log.END_TIME, '%H:%M:%S').time() if log.END_TIME else None
            
            if start_time and end_time:
                # Check if outside working hours (8:25 AM to 7:35 PM)
                work_start = datetime.strptime('08:25:00', '%H:%M:%S').time()
                work_end = datetime.strptime('19:35:00', '%H:%M:%S').time()
                
                # If completely outside working hours
                if start_time < work_start or end_time > work_end:
                    calculation_value = 0
                
                # Check if within break periods
                break_periods = [
                    (datetime.strptime('10:30:00', '%H:%M:%S').time(), datetime.strptime('10:40:00', '%H:%M:%S').time()),
                    (datetime.strptime('13:20:00', '%H:%M:%S').time(), datetime.strptime('14:00:00', '%H:%M:%S').time()),
                    (datetime.strptime('16:20:00', '%H:%M:%S').time(), datetime.strptime('16:30:00', '%H:%M:%S').time())
                ]
                
                # If entry falls entirely within a break period
                for break_start, break_end in break_periods:
                    if start_time >= break_start and end_time <= break_end:
                        calculation_value = 0
                        break
        except Exception as e:
            # If time parsing fails, default to include
            print(f"Time parsing error: {e}")
        
        log_data = {
            **log.__dict__,
            'mode_description': MODES.get(log.MODE, 'Unknown mode'),
            'operator_name': operator_map.get(log.OPERATOR_ID, "") if log.OPERATOR_ID != "0" else "",
            'calculation_value': calculation_value
        }
        # Remove Django internal fields
        log_data.pop('_state', None)
        data.append(log_data)
    
    return Response(data)