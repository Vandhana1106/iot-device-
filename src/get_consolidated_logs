@api_view(['GET'])
def get_consolidated_logs(request):
    """
    View to retrieve machine logs with optional date filtering.
    """
    from_date = request.query_params.get('from_date')
    to_date = request.query_params.get('to_date')
    
    logs = MachineLog.objects.all()
    
    if from_date:
        logs = logs.filter(DATE__gte=from_date)
    if to_date:
        logs = logs.filter(DATE__lte=to_date)
    
    logs = logs.order_by('-DATE')[:10000]
    
    # Convert to a list and serialize manually to add calculation_value
    logs_list = list(logs)
    
    # Prefetch operator data to optimize queries
    operator_ids = set(log.OPERATOR_ID for log in logs_list if log.OPERATOR_ID != "0")
    operators = Operator.objects.filter(rfid_card_no__in=operator_ids)
    operator_map = {op.rfid_card_no: op.operator_name for op in operators}
    
    # Process each log to add calculation value
    serialized_logs = []
    for log in logs_list:
        # Calculate if this entry should be included in calculations
        calculation_value = 1  # Default to include
        
        # Rule 1: Exclude records where OPERATOR_ID is 0 AND MODE is 2
        if log.OPERATOR_ID == "0" and log.MODE == 2:
            calculation_value = 0
        
        # Rule 2 & 3: Check time constraints (working hours and breaks)
        try:
            # Convert time strings to time objects
            start_time = datetime.strptime(log.START_TIME, '%H:%M:%S').time() if log.START_TIME else None
            end_time = datetime.strptime(log.END_TIME, '%H:%M:%S').time() if log.END_TIME else None
            
            if start_time and end_time:
                # Check if outside working hours (8:25 AM to 7:35 PM)
                work_start = datetime.strptime('08:25:00', '%H:%M:%S').time()
                work_end = datetime.strptime('19:35:00', '%H:%M:%S').time()
                
                # If completely outside working hours
                if start_time < work_start or end_time > work_end:
                    calculation_value = 0
                
                # Check if within break periods
                break_periods = [
                    (datetime.strptime('10:30:00', '%H:%M:%S').time(), datetime.strptime('10:40:00', '%H:%M:%S').time()),
                    (datetime.strptime('13:20:00', '%H:%M:%S').time(), datetime.strptime('14:00:00', '%H:%M:%S').time()),
                    (datetime.strptime('16:20:00', '%H:%M:%S').time(), datetime.strptime('16:30:00', '%H:%M:%S').time())
                ]
                
                # If entry falls entirely within a break period
                for break_start, break_end in break_periods:
                    if start_time >= break_start and end_time <= break_end:
                        calculation_value = 0
                        break
        except Exception as e:
            # If time parsing fails, default to include
            print(f"Time parsing error: {e}")
        
        # Serialize the log with additional fields
        log_data = MachineLogSerializer(log).data
        log_data['mode_description'] = MODES.get(log.MODE, 'Unknown mode')
        log_data['operator_name'] = operator_map.get(log.OPERATOR_ID, "") if log.OPERATOR_ID != "0" else ""
        log_data['calculation_value'] = calculation_value
        
        serialized_logs.append(log_data)

    return Response(serialized_logs)